const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { MongoClient, ObjectId } = require('mongodb');
require('dotenv').config();

const app = express();
const port = 4000;

// Middlewares
app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Database configuration
const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@cluster0.t41qjji.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;
const client = new MongoClient(uri);

async function run() {
  try {
    await client.connect();
    const db = client.db("JobDekho");
    const jobCollections = db.collection("jobs");

    // Post a job
    app.post("/post-job", async (req, res) => {
      try {
        const body = req.body;
        body.createdAt = new Date();
        const data = await jobCollections.insertOne(body);
        if (data.insertedId) {
          return res.status(200).json({ success: true, message: 'Job added', data: data });
        } else {
          return res.status(404).send({
            message: 'Cannot insert! Try again later',
            status: false
          });
        }
      } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal server error' });
      }
    });

    // Get all jobs
    app.get('/all-jobs', async (req, res) => {
      try {
        const jobs = await jobCollections.find({}).toArray();
        res.json(jobs);
      } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal server error' });
      }
    });

    // Delete a job
    app.delete('/jobs/:id', async (req, res) => {
      try {
        const jobId = req.params.id;
        const job = await jobCollections.findOne({ _id: new ObjectId(jobId) });
        if (job) {
          await jobCollections.deleteOne({ _id: new ObjectId(jobId) });
          res.json({ success: true, message: 'Job deleted successfully' });
        } else {
          res.status(404).json({ success: false, message: 'Job not found' });
        }
      } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal server error' });
      }
    });

    // Get jobs according to minimum salary
    app.get('/jobs', async (req, res) => {
      try {
        const minSalary = parseInt(req.query.min_salary);
        const jobs = await jobCollections.find({ min_salary: { $gte: minSalary } }).toArray();
        res.json({ success: true, data: jobs });
      } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal server error' });
      }
    });

    await client.db("admin").command({ ping: 1 });
    console.log("You successfully connected to MongoDB!");
  } catch (error) {
    console.error(error);
  }
}

app.listen(port, () => {
  console.log(`Server is listening to http://localhost:${port}`);
});

run().catch(console.dir);
